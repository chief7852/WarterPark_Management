<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.waterpark.emp.team.manage.emp.dao.ICustomerManageDAO">
	<sql id="searchFrag">
		<trim prefixOverrides="AND" suffixOverrides="OR">
		    and
			<trim prefix="AND (" suffix=")">
				<if
					test="searchMap!=null and @org.apache.commons.lang3.StringUtils@isNotBlank(searchMap.searchWord)">
					<choose>
						<when test="searchMap.searchType eq 'id'">
							INSTR(user_id, #{searchMap.searchWord}) > 0
						</when>
						<when test="searchMap.searchType eq 'name'">
							INSTR(user_name, #{searchMap.searchWord}) > 0
						</when>
						<when test="searchMap.searchType eq 'email'">
							INSTR(user_email, #{searchMap.searchWord}) > 0
						</when>
						<otherwise>
							INSTR(user_id, #{searchMap.searchWord}) > 0
							OR
							INSTR(user_name, #{searchMap.searchWord}) > 0
							OR
							INSTR(user_mail, #{searchMap.searchWord}) > 0
						</otherwise>
					</choose>
				</if>
			</trim>
			<trim prefix="AND (" suffix=")" prefixOverrides="AND">
				<if
					test="@org.apache.commons.lang3.StringUtils@isNotBlank(searchMap.minDate)">
					AND TO_CHAR(USER_DATE,'YYYY-MM-DD') >= #{searchMap.minDate}
				</if>
				<if
					test="@org.apache.commons.lang3.StringUtils@isNotBlank(searchMap.maxDate)">
					<![CDATA[
					AND TO_CHAR(USER_DATE,'YYYY-MM-DD') <= #{searchMap.maxDate}
					]]>
				</if>
			</trim>
		</trim>
	</sql>
	
	<select id="selectUserCount" resultType="int">
		SELECT COUNT(*)    
 		  FROM USERS     
 		 WHERE USER_ID NOT LIKE('%GUEST%')       
 		   AND USER_ID NOT IN ('TICKETOFFICE')
		<include refid="searchFrag" />
	</select>

	<select id="selectUserList"
		parameterType="kr.or.waterpark.emp.team.snack.vo.PagingVO"
		resultType="kr.or.waterpark.customer.common.join.vo.UserVO">
		select D.*
		 from (
		      SELECT C.*,rownum as rnum
		        FROM (
		           SELECT a.USER_ID
						 ,USER_NAME
						 ,USER_REG
						 ,USER_MAIL
						 ,SUBSTR(USER_HP,1,3) || '-' || SUBSTR(USER_HP,4,4) || '-'||SUBSTR(USER_HP,8) AS USER_HP
						 ,USER_PROTECT
						 ,TO_CHAR(USER_DEL,'YYYY-MM-DD') AS USER_DEL
						 ,TO_CHAR(USER_DATE,'YYYY-MM-DD') AS USER_DATE
						 ,TO_CHAR(TO_DATE(max(B.MEMBERSHIP_END),'YYYY-MM-DD'),'YYYY-MM-DD') AS MEMBERSHIP_DATE
                         ,G.AGREEMENT_CHECK
					FROM users A
				    LEFT OUTER JOIN MEMBERSHIP B ON (A.USER_ID = B.USER_ID)
                         JOIN AGREEMENT G ON (A.USER_ID = G.USER_ID)
				   WHERE A.USER_ID NOT LIKE('%GUEST%') 
				     AND A.USER_ID NOT IN ('TICKETOFFICE')
                     AND G.CLAUSE_NO = 3
				   group by a.user_id, user_name, user_mail, user_hp, user_protect, user_del, user_date,USER_REG,G.AGREEMENT_CHECK
				   ORDER BY USER_DATE DESC
				   )C
				   where 1 = 1<include refid="searchFrag" />
				)D where 1 = 1
		   	<![CDATA[
			AND RNUM >= #{startRow} AND RNUM <= #{endRow}
			]]>
	</select>

	<select id="selectUserDetails" parameterType="String" resultType="kr.or.waterpark.customer.common.join.vo.UserVO">
		  SELECT H.*, ROWNUM AS RNUM
		   FROM (SELECT A.USER_ID,
			            A.USER_NAME,
			            TO_CHAR(TO_DATE(B.MEMBERSHIP_END,'YYYY-MM-DD HH:MI'),'YYYY-MM-DD') AS MEMBERSHIP_END,
			            D.TICKET_TYPE,
			            F.COM_CODE_NAME,
                        TO_CHAR(TO_DATE(G.PAY_DATE,'YYYY-MM-DD'),'YYYY-MM-DD') AS PAY_DATE,
                        REGEXP_REPLACE(REVERSE(REGEXP_REPLACE( REVERSE(TO_CHAR(nvl(SUM( G.PAY_AMOUNT),0))), '([0-9]{3})','\1,')), '^,','') AS PAY_AMOUNT,
                        G.PAY_METHOD,
                        B.MEMBERSHIP_PARENT
			       FROM USERS A
			            LEFT OUTER JOIN MEMBERSHIP B ON ( A.USER_ID = B.USER_ID)
			            LEFT OUTER JOIN RES_INFO C ON (B.RES_INFO_CODE = C.RES_INFO_CODE)
			            LEFT OUTER JOIN TICKET D ON (C.TICKET_ID = D.TICKET_ID)
			            LEFT OUTER JOIN COM_CODE F ON (D.TICKET_TYPE = F.COM_CODE)
                        JOIN PAY G ON(C.RES_CODE = G.RES_CODE)
			      WHERE A.USER_ID = #{user_id}
			      GROUP BY A.USER_ID, A.USER_NAME, MEMBERSHIP_END, D.TICKET_TYPE, F.COM_CODE_NAME, PAY_DATE,G.PAY_METHOD,B.MEMBERSHIP_PARENT
			      )H
	</select>

	<select id="selectUserPayDetails" parameterType="String" resultType="kr.or.waterpark.emp.team.manage.emp.vo.CustomerUseInfoVO">
       select rownum as rnum, c.*
        from (SELECt B.USER_ID,
	           TO_CHAR(B.RES_DATE,'YYYY-MM-DD HH:MI') AS RES_DATE,
               TO_CHAR(B.RES_PREDATE,'YYYY-MM-DD HH:MI') AS RES_PREDATE,
	           TO_CHAR(RES_CANCEL,'YYYY-MM-DD HH:MI') AS RES_CANCEL,
	           B.SALE_ID,
	           REGEXP_REPLACE(REVERSE(REGEXP_REPLACE( REVERSE(TO_CHAR(nvl(SUM(A.PAY_AMOUNT),0))), '([0-9]{3})','\1,')), '^,','') AS PAY_AMOUNT,
               D.COIN_START AS USE_DATE
	      FROM RESERVE B
	           JOIN PAY A ON(B.RES_CODE = A.RES_CODE)
	           LEFT OUTER JOIN SALE C ON(B.SALE_ID = C.SALE_ID)
               LEFT OUTER JOIN COIN D ON(B.RES_CODE = D.RES_INFO_CODE)
	     WHERE B.USER_ID = #{DATA}
	     ORDER BY RES_DATE DESC
	     )c
	     <![CDATA[
			AND RNUM >= #{startRow} AND RNUM <= #{endRow}
			]]>
	</select>

	<select id="selectUserTotalAmount" parameterType="String" resultType="String">
		SELECT REGEXP_REPLACE(REVERSE(REGEXP_REPLACE( REVERSE(TO_CHAR(nvl(SUM(A.PAY_AMOUNT),0))), '([0-9]{3})','\1,')), '^,','') AS PAY_AMOUNT
   		  FROM RESERVE B
               JOIN PAY A ON(B.RES_CODE = A.RES_CODE)
         WHERE B.USER_ID = #{data}
	</select>
	
	<select id="selectUseInfoList" parameterType="String" resultType="kr.or.waterpark.emp.team.manage.emp.vo.CustomerUseInfoVO">
		 SELECT G.*, ROWNUM AS RNUM
     FROM(
        SELECT 
               TO_CHAR(B.RES_DATE,'YYYY-MM-DD') AS RES_DATE,
               TO_CHAR(B.RES_PREDATE,'YYYY-MM-DD') AS RES_PREDATE,
               TO_CHAR(C.COIN_START,'YYYY-MM-DD') AS USE_DATE,
               B.RES_CANCEL,
               D.SALE_NAME,
               REGEXP_REPLACE(REVERSE(REGEXP_REPLACE( REVERSE(TO_CHAR(nvl(SUM(F.PAY_AMOUNT),0))), '([0-9]{3})','\1,')), '^,','') AS PAY_AMOUNT
          FROM USERS A
               LEFT OUTER JOIN RESERVE B ON(A.USER_ID = B.USER_ID)
               LEFT OUTER JOIN COIN C ON( B.RES_CODE = C.RES_INFO_CODE)
               LEFT OUTER JOIN SALE D ON (B.SALE_ID = D.SALE_ID)
               LEFT OUTER JOIN PAY F ON (F.RES_CODE = B.RES_CODE)
               WHERE A.USER_ID = #{data}
          GROUP BY B.RES_DATE, B.RES_PREDATE, C.COIN_START, B.RES_CANCEL, D.SALE_NAME
          ORDER BY B.RES_DATE DESC) G
	</select>
</mapper>